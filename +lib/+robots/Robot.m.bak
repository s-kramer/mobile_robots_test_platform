%Copyright 2013 Sebastian Kramer <sebastian.kramer@wp.pl> 
%This file is part of "Matlab mobile robots test platformi r1.0" 
%
%"Matlab mobile robots test platform" is free software: you can redistribute it and/or modify
%it under the terms of the GNU General Public License as published by
%the Free Software Foundation, either version 3 of the License, or
%(at your option) any later version.
%
%"Matlab mobile robots test platform r1.0" is distributed in the hope that it will be useful,
%but WITHOUT ANY WARRANTY; without even the implied warranty of
%MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License
%along with "Matlab mobile robots test platform r1.0".  If not, see <http://www.gnu.org/licenses/>.

classdef Robot < handle
    %ROBOT Robot superclass
    %   Robot superclass

%     properties (Access = protected)	%toDo: poprawic konfikty z World
    properties (Access = public)	%toDo: poprawic konfikty z World
        %robot info
        position=struct('x',0,'y',0);   %robot position x,y only
        state = struct('x',0,'y',0,'fi',0);    %state vector: posx, posy, fi angle
        desState = struct('x',0,'y',0,'fi',0);  %currently desired state
        
        forceLaw;   %force law type class
        currForce;  %actual force exerted from other robots struct ('x',0,'y',0)
        viewRange = 0;  %robot range of view (radius) [pixel] NOT IMPLEMENTED
        groups={};  %robots groups
        
        %world-connected parameters
        parent; % the parent of the robot (World) handle
        currRobotsArrang;    %actual arrangement of all (sensed) robots struct('aLandmarks',[],'aAgents',[],'aLeaders',[])
        angRegulator = lib.robots.PID(230,0.003,0.001,30);
        posRegulator = lib.robots.PID(230,0.003,0.001,1);
        regPhases = struct('p1',false,'p2',false,'p3',false);
    
        %robot parameters
        Tp = 1e-3;  %internal sampling time Tp = 1ms 
    end
    
    methods (Access = private)
        function setPosition(obj, x,y)
            obj.position.x = x;
            obj.position.y = y;
        end
    end
    methods (Access = public)
        %get functions
        function pos=getPosition(obj)
            pos=obj.position;
        end
        
        function act = getState(obj)
            act = obj.state;
        end
        
        function des = getDesState(obj)
            des = obj.desState;
        end
        
        function rng = getRange(obj)
            rng = obj.viewRange;
        end
        
        %set functions
        %arg u - struct{v,w}
        function changeDesState(obj,state)
            obj.desState = state;
        end
        
        function dist = getDistToRobot(obj, state)
            dist = struct('d',0,'dfi',0);
            dist.d = norm([obj.getState.x - state.x, obj.getState.y - state.y]);
            dist.dfi = obj.state.fi - state.fi;
        end
        
        %robot steering signals generation
        function steerToDestState(obj)
            loc2TargetOrient = 180/pi*atan2(obj.desState.y - obj.state.y,obj.desState.x - obj.state.x);
            eang = loc2TargetOrient - obj.state.fi;
            if(eang<-180)
                eang=eang+360;
            elseif(eang>180)
                eang=eang-360;
            end
            epos = norm([obj.desState.x-obj.state.x,obj.desState.y-obj.state.y]);
            
            %METHOD 1 (continous regulation, 2 available linear speeds)
%             v = [1,100];
%             if(norm([obj.desState.x-obj.state.x, obj.desState.y-obj.state.y]) > obj.posRegulator.getTolError())
%                 obj.nextState(struct('v',v(1+(abs(eang)<obj.angRegulator.getTolError())),'w',obj.angRegulator.genU(eang)));            
%             end

            %METHOD 2 - 3 stage
            %phase 1 - get the orientation towards destination point
            if((obj.regPhases.p1==false) && (abs(eang) >=obj.angRegulator.getTolError()) && (obj.desState.y ~= obj.state.y) && (obj.desState.x ~= obj.state.x))
                obj.nextState(struct('v',0,'w',obj.angRegulator.genU(eang)));
                disp('Phase 1');
            %phase 2 - orientation correct, drive to dest point
            elseif((obj.regPhases.p2==false) && (norm([obj.desState.y-obj.state.y, obj.desState.x-obj.state.x]) > obj.posRegulator.getTolError()))
                obj.regPhases.p1=true;
                obj.nextState(struct('v',obj.posRegulator.genU(epos),'w',obj.angRegulator.genU(eang)));
                disp('Phase 2');
            %phase 3 - dest point achived, set dest orientation
            elseif(obj.regPhases.p3==false)
                obj.regPhases.p2=true;
                eang = obj.desState.fi - obj.state.fi;
                obj.nextState(struct('v',0,'w',obj.angRegulator.genU(eang)));
                disp('Phase 3');
            end
        end
        
        %set robots range of view
        %arg1 - range of view [pixel?]
        function setRange(obj,range)
            obj.viewRange = range;
        end

        function update(obj)
            obj.makeMeasurement();
            obj.calcForces();
            obj.resetRegulators();
            %move with step proportional to the smallest equlibrum distance
            fi_d = 180/pi*atan2(obj.currForce.y,obj.currForce.x);
            obj.changeDesState(struct('x',obj.getState.x+ obj.forceLaw.getStep()*cosd(fi_d),...
                'y',obj.getState.y + obj.forceLaw.getStep()*sind(fi_d),...
                'fi',fi_d));
            
        end
    end
    methods (Access = private)
        function next = nextState(obj, u)
            next.x = obj.Tp * u.v * cosd(obj.state.fi) + obj.state.x;
            next.y = obj.Tp * u.v * sind(obj.state.fi) + obj.state.y;
            next.fi = u.w*obj.Tp + obj.state.fi;
        
            %update robot info
            obj.setPosition(next.x, next.y);
            obj.state = next;
        end
        function resetRegulators(obj)            
            obj.posRegulator.reset();
            obj.angRegulator.reset();
            obj.regPhases = struct('p1',false,'p2',false,'p3',false);            
        end

        function calcForces(obj)
            obj.currForce = obj.forceLaw.update(obj.currRobotsArrang, obj.state);            
        end
        
        %updates the information about other robots arrangement
        %toDo: zmieniæ pola publiczne na funkcje
        function makeMeasurement(obj)
            obj.currRobotsArrang.aAgents = obj.parent.aAgents;
            obj.currRobotsArrang.aLandmarks = obj.parent.aLandmarks;
            obj.currRobotsArrang.aLeaders = obj.parent.aLeaders;

            %remove the current robot from downloaded robots arrangement 
            if isa(obj,'lib.robots.Agent')==1
                for i=1:numel(obj.currRobotsArrang.aAgents)
                    state = obj.currRobotsArrang.aAgents(i).getState;
                    if (state.x == obj.state.x) && (state.y == obj.state.y) &&  (state.fi == obj.state.fi)
                        obj.currRobotsArrang.aAgents(i) = [];
                        break
                    end
                end
            elseif isa(obj,'lib.robots.Landmark')==1
                for i=1:numel(obj.currRobotsArrang.Landmark)
                    state = obj.currRobotsArrang.Landmark(i).getState;
                    if (state.x == obj.state.x) && (state.y == obj.state.y) && (state.fi == obj.state.fi)
                        obj.currRobotsArrang.Landmark(i) = [];
                        break
                    end
                end                
            else
                for i=1:numel(obj.currRobotsArrang.aLeaders)
                    state = obj.currRobotsArrang.aLeaders(i).getState;
                    if (state.x == obj.state.x) && (state.y == obj.state.y) && (state.fi == obj.state.fi)
                        obj.currRobotsArrang.aLeaders(i) = [];
                        break
                    end
                end                
            end        
        end
    end
end


